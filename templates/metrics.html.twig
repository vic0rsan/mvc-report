{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <h1>Analys av kodkvalitet</h1>
    <h2>1. Introduktion</h2>
    <h2>1.1 Det 6st C:n</h2>

    <h3>1.1.1 Codestyle</h3>
    <p>
        Codestyle är en uppsättning av riktlinjer för hur proper kod skall se ut. Dessa riktlinjer varierar för olika programmeringsspråk, det kan exempelvist gälla hur man avskärmar ett kodblock för en enskild funktion. 
        Det flesta programmeringsspråk ex JavaScript, C, PHP använder klammerparenterser {} som markörer medans Python brukar sig av antalet indragningar för att markera kodblock.
        Ett annat exempel på kodstil är formatering för variablar som består av flera ord i namnet. Tex finns "Camel Case": variableName, "Snake Case": variable_name, "Pascal Case": VariableName mm.
        Gemensamt har samtliga programmeringsspråk vissa riktlinjer för formateringen av kod och dess huvudsakliga syfte är att dirigera till att skriva en lättläslighet och konsekvent kod.</p>
    <p>
        Vid utvecklingen av webbsidan använde jag 3st valideringsverktyg för att förbättra min kodstil och läslighet. Dessa verktyg är PHPMD och PHPStan.
        PHPMD och PHPStan är en så kallad "Mess Detector" som kollar igenom koden efter buggar, ineffektiva samt oanvända uttryck, variablar, metoder mm. 
        I mitt projekt har jag dessa verktyg inkluderade som composer-paket och kan då smidigt via deklarerade kortkommandon exekvera dessa validator.
    </p>

    <h3>1.1.2 Coverage</h3>
    <p>
        Kodtäckning är en kvalitetsindikator för andelen kodrader, klasser, metoder som omfattas vid en eller flera testfall. Dessto högre procentuella värden för kodtäckning, dessto bättre kvalitetssäkring innehar koden.
        En låg kodtäckning kan ställa till med oväntad resultat för den slutgitliga applikationen då exempelvis en metod fallerar eller returneras ett inkorrekt värde inom ett visst fall.
        När man skall utföra tester så är det därför viktigt att testa samtliga värden som triggar det olika utfallen för en metod/klass.
    </p>
    <p>
        I mitt projekt använde jag verktyget PHPUnit för att skriva och exekvera testfall mot mina klass-metoder. Likt kodvalidatorerna har jag PHPUnit inkluderad i min composer.json fil som ett kommando.
    </p>
    <figure>
        <img src="{{ asset('img/coverage.png') }}" width="800" alt="Code Coverage">
        <figcaption>Kodtäckning för Card-klasserna i mitt projekt.</figcaption>
    </figure>

    <h3>1.1.3 Complexity</h3>
    <p>
        Kodkomplexitet eller cyklomatisk komplexitet handlar om antalet möjliga vägar en funktion kan ta beroende av olika parametrar samt vilkor likt vägskäl.
        If-else, switch eller for/while-loopar är exempel på vägskäl för riktningar en funktion kan ta. En låg kodkomplexitet bidrar till en god underhållbarhet, testbarhet och lättläslighet medans en hög kodkomplexitet
        med flera inkapslade if-else-sattser och loopar ökar antalet tester som bör genomföras då flera vägar introduceras vilket gör det även svårare för utvecklaren att förstå koden i sin helhet då varje enskild väg måste analyseras.
        När man utför en kodkomplexitets analys kan utvecklaren få en indikation över vilka kodblock som behöver omfaktoriseras för att minska komplexiteten vilket i sin tur minskar risken för buggar samt antalet tester som krävs 
        för att säkerställa kodkvaliten.
    </p>
    <p>
        I mitt fall använde jag PHPMetrics för att analyser kodkomplexiteten av mitt projekt.
    </p>
    <figure>
        <img src="{{ asset('img/complex.png') }}" width="400" alt="Code Coverage">
        <figcaption>Visuell representation över kodkomplexiteten för olika klasser/controllers. De gröna cirklarna motsvarar en låg kodkomplexitet medans de röda syftar på en hög kodkomplexitet.</figcaption>
    </figure>
    <figure>
        <img src="{{ asset('img/top_complex.png') }}" width="800" alt="Code Coverage">
        <figcaption>Lista över det klasser med högst kodkomplexitets värde.</figcaption>
    </figure>

    <h3>1.1.4 Cohesion</h3>
    <p>
        Cohesion är en kvalitetsfaktor som täcker metoders sammanhållning inom en klass. Det handlar helt enkelt hur väl metoder passar in i en klass. 
        För att avgöra hur väl metoden är integrerad i klassen kollar man efter om metoden följer klassens funktionella syfte samt använding av instans attributer.
        Cohesion antar antigen värdet "high cohesion" om metoden pass väl in i klassen eller tvärtom blir det "low cohesion" om metoden har en svag anknyting inut i klassen.
        En hög sammanhållningar har goda egenskaper inom testbarhet, minskad modulär komplexitet (färre modular som klassen är beroende av), lättläslighet då man behöver endast göra ändring i en enda klass-fil. 
        Man brukar mäta cohesion i Lack of Cohesion (LCOM) där låga värden innebär en hög cohesion medans höga LCOM värden indikerar på en låg cohesion. 
    </p>
    <p>
        Jag använde PHPMetrics för att mäta LCOM-värderna för card-klasserna. Mitt genomsnittliga värde låg på 1.42 LCOM vilket syfter på en relativt hög sammanhållning.
    </p>
    <figure>
        <img src="{{ asset('img/cohesion.png') }}" width="1300" alt="Code Coverage">
        <figcaption>Lista över det klasser med högst LCOM-värde.</figcaption>
    </figure>

    <h3>1.1.5 Coupling</h3>
    <p>
        Coupling talar om vilken grad som klasser och moduler är beroende kontra självständiga från varandra.
        Man brukar mäta coupling inom två värden; Afferent Coupling (AC) och Efferent Coupling (EC). 
        Afferent Coupling syfter på antalet utgående anslutningar som påverkar externa klasser.
        Efferent Coupling är antal inkommande anslutningar från externa klasser som har effekt för den bestämda klassen.
        En klass som innehar ett högt AC-värde betyder den är beroende av andra klasser däremot en klass med ett högt EC-värde har många andra klasser som är beroende av klassen i fråga.
        Klasser som har låga värden för både AC och EC anses var en självständig klass. 
    </p>
    <p>
        Coupling-värdena för mitt projekt fick jag via PHPMetrics.
    </p>
    <figure>
        <img src="{{ asset('img/coupling.png') }}" width="1300" alt="Code Coverage">
        <figcaption>Lista över det klasser med flest ingående/utgående-anslutningar.</figcaption>
    </figure>

    <h3>1.1.6 CRAP</h3>
    <p>
        CRAP står för Change Risk Analyzer and Predictor och är en estimering som talar om sannolikheten att nya defekter introduceras vid ändring av koden.
        Värdet för CRAP beräknas genom komplexiteten av metoden kontra antalet testfall som täcker metoden. Ju högre CRAP-värde dessto större risk för nya buggar. 
        För att sänka CRAP-värdet kan man antigen skriva flera testfall för metoden eller refaktorisera metoden till en mindre komplex (färre kodrader, neslingar) kodblock.
    </p>
    <figure>
        <img src="{{ asset('img/crap.png') }}" width="800" alt="Code Coverage">
        <figcaption>Den klass med troligen högst CRAP-värde (högst komplexvärde med minimal antal tester).</figcaption>
    </figure>

    <h2>2. Phpmetrics</h2>
    <p>
        Jag kommer jobba med klasserna som har högst cyklomatiska komplexitets värden vilket resulterade till Game21, ApiCardController och CardController.
        Som mest har klasserna ApiCardController och CardControll med värdet 7, vilket är fortfarande relativt låg i helheten då 1-10 anses inneha god testbarhet med låga risker för buggar och där värden över 50 anses vara otestbar kod, där efter höga risker för buggar.
        Genom att sänka den cyklomatiska värdena kan läsligheten samt testbarheten öka då ju lägre cyklomatisk kodkomplexitet metoden har dessto färre vägar finns det att beröra. 
        Dessto simplare kod, dessto lägre risk för buggar.
    </p>
    <figure>
        <img src="{{ asset('img/oop.png') }}" width="1200" alt="Code Coverage">
        <figcaption>Rader för klasserna med högst klass cyklomatisk komplexitet.</figcaption>
    </figure>
    <p>
        Enligt PHPmetrics rapporten saknar klasserna där ovan någon form av tester trotts dess relativt höga kodkomplexitet i förhållande till det övriga klasserna i projekt. 
        Vilket innebär även att dessa klasser har högst risk för buggar enligt "Assertions in tests"-sektionen i PHPMetrics. 
        Nästa förbättringssteg blir givetvist att skriva tester för det nämnda klasser för att minimera riskerna för buggar.
    </p>
    <figure>
        <img src="{{ asset('img/assertion.png') }}" width="1200" alt="Code Coverage">
        <figcaption>Klasser som saknar någon form av kodtäckning.</figcaption>
    </figure>
    <p>
        En annan punkt som PHPMetrics tog upp handlar om kodvolymen där bland annat GameController, LibraryController och CardGraphics hamnade i topp 3 för klasser med flest kodrader.
        Med tanke på att en större kodbas har större risk för buggar än en kompaktare så är det något som jag bör förbättre. Lösningen blir att refaktorisera metoder för att minska raderna.
    </p>
     <figure>
        <img src="{{ asset('img/volume.png') }}" width="1200" alt="Code Coverage">
        <figcaption>Klasser med störst volym.</figcaption>
    </figure>

    <h2>3. Scrutinizer</h2>
    <figure>
        <img src="https://scrutinizer-ci.com/g/vic0rsan/mvc-report/badges/quality-score.png?b=master" width="130" alt="quality-score">
        <img src="https://scrutinizer-ci.com/g/vic0rsan/mvc-report/badges/coverage.png?b=master" width="130" alt="coverage-badge">
        <img src="https://scrutinizer-ci.com/g/vic0rsan/mvc-report/badges/build.png?b=master" width="110" alt="build">
    </figure>
    <p>
        Scrutinizer bedömde mitt projekt som mycket bra med poängsumman 10.00 vilket är det högsta betyget. Däremot finns det fortfarande ett antal punkter som börs förbättras.
        Bland annat kodtäckning som ligger vid tillfället på 19 procent där 60 procent enligt Scrutinizer sägs vara minimumgränsen för god kodtäckning. 
    </p>
    <p>
        I issues-fliken inom Scrutnizer så uppmärksammas 3st filer, där en utav dem är från projektets src-mapp (src/Controller/ApiLibraryController.php) och resterande är config-filer tillhörande Symphony paketet.
        I ApiLibraryController finns det en potentiell bug som gäller en variabel som lagrar rader från ett Library-objekt.
    </p>
    <figure>
        <img src="{{ asset('img/bug.png') }}" width="800" alt="Code Coverage">
        <figcaption>En bug som Scrutinizer upptäckte inom ApiLibraryController.</figcaption>
    </figure>
    <p>
        Nästa punkt jag noterade i Scrutinizer var CRAP poängen för samtliga klass-metoder där metoderna inom klasserna CardController, GameController, ApiCardController har högst CRAP poäng (störst risk för buggar).
    </p>
     <figure>
        <img src="{{ asset('img/scrut-crap.png') }}" width="500" alt="Code Coverage">
        <figcaption>Lista över samtliga klass-metoder och dess CRAP-poäng.</figcaption>
    </figure>

    <h2>4. Förbättringar</h2>
    <p>
        Den första förbättringen jag tänker göra är att fixa en bug som Scrutinizer har upptäck i min ApiLibraryController klass. 
        Buggen handlar om en variabel som lagrar matchade bok-objekt från en sök-query. För att ge ett felmeddlande om inga böker finns enligt det id:t (variabeln är tom) så används bok-variabel inom en if-statement där den behandlas som en boolean, 
        vilket enligt Scrutinizer kan vara problematiskt. Lösningen är att använda den inbyggda PHP-metoden "empty" för att kolla om variabel är en tom array eller ej.
    </p>

    <p>
        Den andra förbättringsåtgärdet blir att minska kodkomplexiteten för klassmetoder som hanterar kortleken (ApiCardController, CardController, GameController) då dessa har en marginellt högre CRAP-poäng än övriga.
        Lösningen blir att omfaktorisera och eventuell slå ihop metoder om möjligt tex draw, drawMany som har samma grundsyft är goda kanidater. 
    </p>
    <p>
        Den tredje förbättringen blir att skriva nya tester för klass-metoder som har en bristande kodtäckning. 
        Jag väljer att skriva tester för Controller-klasserna Card och Game då dessa klasser har ett större antal kodrader samt saknar kodtäckning.
    </p>

    <h3>4.1 Resultat</h3>

{% endblock %}